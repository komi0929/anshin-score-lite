\'use client';
import { useState, useRef } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';

export default function PhotoCapturePage() {
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const cameraInputRef = useRef<HTMLInputElement>(null);
  const router = useRouter();

  const handleImageSelect = (file: File) => {
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setSelectedImage(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      handleImageSelect(file);
    }
  };

  const handleJudgment = async () => {
    if (!selectedImage) {
      alert('画像を選択してください');
      return;
    }

    // localStorageからアレルゲン情報を取得
    const selectedAllergens = JSON.parse(localStorage.getItem('selectedAllergens') || '[]');
    if (selectedAllergens.length === 0) {
      alert('アレルゲン情報がありません。最初からやり直してください。');
      router.push('/allergen-select');
      return;
    }

    setIsProcessing(true);
    
    try {
      // 実際のAPI呼び出し
      const response = await fetch('/api/judge', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          image: selectedImage,
          allergens: selectedAllergens
        })
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || 'API呼び出しに失敗しました');
      }

      // 判定結果をlocalStorageに保存
      localStorage.setItem('judgmentResult', JSON.stringify({
        result: result.finalResult,
        message: result.message,
        details: result.details,
        timestamp: result.timestamp
      }));

      // 結果ページへ遷移
      router.push('/result');

    } catch (error) {
      console.error('Judgment error:', error);
      
      // エラー時のフォールバック
      const fallbackResult = {
        result: 'warning',
        message: '判定処理中にエラーが発生しました',
        details: 'ネットワーク接続を確認して、もう一度お試しください。エラーが続く場合は、別の画像をお試しください。',
        timestamp: new Date().toISOString()
      };
      
      localStorage.setItem('judgmentResult', JSON.stringify(fallbackResult));
      router.push('/result');
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* モバイル専用固定ヘッダー */}
      <div className="sticky top-0 bg-white border-b border-gray-200 px-4 py-3 z-10">
        <div className="flex items-center justify-between">
          <Link href="/allergen-select" className="text-orange-500 text-lg">
            ← 戻る
          </Link>
          <h1 className="text-lg font-semibold text-gray-900">写真撮影</h1>
          <div className="w-12"></div> {/* バランス調整用 */}
        </div>
      </div>

      <div className="px-4 py-6">
        {/* 説明 */}
        <div className="mb-6 text-center">
          <div className="text-4xl mb-3">📸</div>
          <h2 className="text-xl font-bold text-gray-900 mb-2">
            原材料表示を撮影
          </h2>
          <p className="text-gray-600 text-sm">
            商品パッケージの原材料名部分を<br />
            鮮明に撮影してください
          </p>
        </div>

        {/* 画像プレビュー */}
        {selectedImage ? (
          <div className="mb-6">
            <div className="bg-white rounded-2xl p-4 shadow-sm">
              <img 
                src={selectedImage} 
                alt="選択された画像" 
                className="w-full h-64 object-contain rounded-xl border border-gray-200"
              />
              <button
                onClick={() => setSelectedImage(null)}
                className="w-full mt-3 py-2 text-orange-500 text-sm font-medium"
              >
                別の写真にする
              </button>
            </div>
          </div>
        ) : (
          <div className="mb-6">
            <div className="bg-white rounded-2xl p-8 shadow-sm border-2 border-dashed border-gray-300 text-center">
              <div className="text-6xl mb-4 text-gray-400">📷</div>
              <p className="text-gray-500 text-sm">
                画像を選択してください
              </p>
            </div>
          </div>
        )}

        {/* 撮影ボタン（モバイル最適化） */}
        <div className="space-y-3 mb-8">
          {/* カメラ撮影 */}
          <button
            onClick={() => cameraInputRef.current?.click()}
            className="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold py-4 rounded-xl flex items-center justify-center space-x-3 transition-all transform active:scale-95"
          >
            <span className="text-xl">📸</span>
            <span>カメラで撮影</span>
          </button>
          
          {/* ギャラリーから選択 */}
          <button
            onClick={() => fileInputRef.current?.click()}
            className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold py-4 rounded-xl flex items-center justify-center space-x-3 transition-all transform active:scale-95"
          >
            <span className="text-xl">🖼️</span>
            <span>ギャラリーから選択</span>
          </button>
        </div>

        {/* 撮影のコツ */}
        <div className="bg-blue-50 rounded-xl p-4 mb-8">
          <h3 className="font-semibold text-blue-900 mb-2 text-sm">📝 撮影のコツ</h3>
          <ul className="text-blue-800 text-xs space-y-1">
            <li>• 原材料名部分のみを撮影</li>
            <li>• 文字が鮮明に見えるように</li>
            <li>• 影や反射がないように</li>
            <li>• 手ブレに注意</li>
          </ul>
        </div>

        {/* 判定ボタン */}
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4">
          <button
            onClick={handleJudgment}
            disabled={!selectedImage || isProcessing}
            className={`w-full py-4 rounded-xl font-semibold text-lg transition-all ${
              selectedImage && !isProcessing
                ? 'bg-orange-500 hover:bg-orange-600 text-white transform active:scale-95'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
          >
            {isProcessing ? (
              <div className="flex items-center justify-center space-x-2">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                <span>判定中...</span>
              </div>
            ) : (
              '判定する'
            )}
          </button>
        </div>

        {/* 隠しinput要素 */}
        <input
          ref={cameraInputRef}
          type="file"
          accept="image/*"
          capture="camera"
          onChange={handleFileSelect}
          className="hidden"
        />
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleFileSelect}
          className="hidden"
        />
      </div>
      
      {/* ボタン用の余白 */}
      <div className="h-20"></div>
    </div>
  );
}